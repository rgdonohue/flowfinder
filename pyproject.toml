[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flowfinder-benchmark"
version = "0.1.0"
description = "Python watershed delineation tool with performance monitoring and benchmarking infrastructure"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "FLOWFINDER Team", email = "team@flowfinder.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "geopandas>=0.12.0",
    "rasterio>=1.3.0",
    "shapely>=1.8.0",
    "fiona>=1.8.0",
    "pyproj>=3.4.0",
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "pyyaml>=6.0",
    "python-dotenv>=0.19.0",
    "tqdm>=4.64.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
]
jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.4.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]
viz = [
    "bokeh>=2.4.0",
    "folium>=0.12.0",
]

[project.scripts]
basin-sampler = "scripts.basin_sampler:main"
truth-extractor = "scripts.truth_extractor:main"
benchmark-runner = "scripts.benchmark_runner:main"

[project.urls]
Homepage = "https://github.com/flowfinder/benchmark"
Repository = "https://github.com/flowfinder/benchmark.git"
Documentation = "https://flowfinder.github.io/benchmark"
Issues = "https://github.com/flowfinder/benchmark/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["scripts*", "config*", "flowfinder*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests", "flowfinder"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning:pyogrio.*",
    "ignore::DeprecationWarning:pyproj.*",
    "ignore::DeprecationWarning:pandas.*",
    "ignore:.*shapely.geos.*:DeprecationWarning",
    "ignore:.*CRS.*unsafe.*:DeprecationWarning",
    "ignore:.*ndim.*scalar.*:DeprecationWarning"
]

[tool.coverage.run]
source = ["scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
